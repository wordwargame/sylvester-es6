{"version":3,"sources":["../src/Vertex.js"],"names":["Vertex","point","setElements","elements","length","push","polygon","node","nodeFor","prev","data","next","A","subtract","B","theta","angleFrom","PRECISION","Math","abs","PI","cross","dot","plane","normal","result","isConvex","Vector","convert","points","pointSet","toArray","list","n","i"],"mappings":"AAAA;;;;;;;;;AAEA;;AACA;;AACA;;;;;;;;IAEaA,M,WAAAA,M;;;AAET,oBAAaC,KAAb,EACA;AAAA;;AAAA,oHACUA,KADV;;AAEI,cAAKC,WAAL,CAAiBD,KAAjB;AACA,YAAI,MAAKE,QAAL,CAAcC,MAAd,KAAyB,CAA7B,EACA;AACI,kBAAKD,QAAL,CAAcE,IAAd,CAAmB,CAAnB;AACH;AACD,YAAI,MAAKF,QAAL,CAAcC,MAAd,KAAyB,CAA7B,EACA;AAAA;;AACI,0BAAO,IAAP;AACH;AAVL;AAWC;;AAED;AACA;AACA;;;;;iCACUE,O,EACV;AACI,gBAAIC,OAAOD,QAAQE,OAAR,CAAgB,IAAhB,CAAX;AACA,gBAAID,SAAS,IAAb,EACA;AACI,uBAAO,IAAP;AACH;AACD,gBAAIE,OAAOF,KAAKE,IAAL,CAAUC,IAArB;AAAA,gBAA2BC,OAAOJ,KAAKI,IAAL,CAAUD,IAA5C;AACA,gBAAIE,IAAID,KAAKE,QAAL,CAAc,IAAd,CAAR;AACA,gBAAIC,IAAIL,KAAKI,QAAL,CAAc,IAAd,CAAR;AACA,gBAAIE,QAAQH,EAAEI,SAAF,CAAYF,CAAZ,CAAZ;AACA,gBAAIC,SAASE,oBAAb,EACA;AACI,uBAAO,IAAP;AACH;AACD,gBAAIC,KAAKC,GAAL,CAASJ,QAAQG,KAAKE,EAAtB,KAA6BH,oBAAjC,EACA;AACI,uBAAO,KAAP;AACH;AACD,mBAAQL,EAAES,KAAF,CAAQP,CAAR,EAAWQ,GAAX,CAAehB,QAAQiB,KAAR,CAAcC,MAA7B,IAAuC,CAA/C;AACH;;AAED;;;;iCACUlB,O,EACV;AACI,gBAAImB,SAAS,KAAKC,QAAL,CAAcpB,OAAd,CAAb;AACA,mBAAQmB,WAAW,IAAZ,GAAoB,IAApB,GAA2B,CAACA,MAAnC;AACH;;;6BAEKnB,O,EACN;AACI,gBAAImB,SAAS,KAAKC,QAAL,CAAcpB,OAAd,CAAb;AACA,mBAAQmB,WAAW,IAAZ,GAAoB,IAApB,GAA4BA,SAAS,QAAT,GAAoB,QAAvD;AACH;;;;EApDuBE,e;;AAwD5B;;;AACA3B,OAAO4B,OAAP,GAAiB,UAASC,MAAT,EACjB;AACI,QAAIC,WAAWD,OAAOE,OAAP,GAAiBF,OAAOE,OAAP,EAAjB,GAAoCF,MAAnD;AACA,QAAIG,OAAO,EAAX;AAAA,QAAeC,IAAIH,SAAS1B,MAA5B;AACA,SAAK,IAAI8B,IAAI,CAAb,EAAgBA,IAAID,CAApB,EAAuBC,GAAvB,EACA;AACIF,aAAK3B,IAAL,CAAU,IAAIL,MAAJ,CAAW8B,SAASI,CAAT,CAAX,CAAV;AACH;AACD,WAAOF,IAAP;AACH,CATD","file":"Vertex.js","sourcesContent":["\"use strict\";\n\nimport { Vector } from \"./Vector\";\nimport { PRECISION } from \"./PRECISION\";\nimport { Polygon } from \"./Polygon\";\n\nexport class Vertex extends Vector\n{\n    constructor (point)\n    {\n        super(point);\n        this.setElements(point);\n        if (this.elements.length === 2)\n        {\n            this.elements.push(0);\n        }\n        if (this.elements.length !== 3)\n        {\n            return null;\n        }\n    }\n\n    // Returns true iff the vertex's internal angle is 0 <= x < 180\n    // in the context of the given polygon object. Returns null if the\n    // vertex does not exist in the polygon.\n    isConvex (polygon)\n    {\n        var node = polygon.nodeFor(this);\n        if (node === null)\n        {\n            return null;\n        }\n        var prev = node.prev.data, next = node.next.data;\n        var A = next.subtract(this);\n        var B = prev.subtract(this);\n        var theta = A.angleFrom(B);\n        if (theta <= PRECISION)\n        {\n            return true;\n        }\n        if (Math.abs(theta - Math.PI) <= PRECISION)\n        {\n            return false;\n        }\n        return (A.cross(B).dot(polygon.plane.normal) > 0);\n    }\n\n    // Returns true iff the vertex's internal angle is 180 <= x < 360\n    isReflex (polygon)\n    {\n        var result = this.isConvex(polygon);\n        return (result === null) ? null : !result;\n    }\n\n    type (polygon)\n    {\n        var result = this.isConvex(polygon);\n        return (result === null) ? null : (result ? 'convex' : 'reflex');\n    }\n}\n\n\n// Method for converting a set of arrays/vectors/whatever to a set of Vertex objects\nVertex.convert = function(points)\n{\n    var pointSet = points.toArray ? points.toArray() : points;\n    var list = [], n = pointSet.length;\n    for (var i = 0; i < n; i++)\n    {\n        list.push(new Vertex(pointSet[i]));\n    }\n    return list;\n};\n"]}