{"version":3,"sources":["../src/Plane.js"],"names":["Plane","anchor","v1","v2","setVectors","plane","contains","isParallelTo","normal","vector","V","elements","obj","theta","angleFrom","Math","abs","PRECISION","PI","direction","isPerpendicularTo","intersects","A","B","N","P","add","diff","D","multiplier","Vector","cross","toUnitVector","O","solver","Matrix","Zero","i","isSingular","inverse","x","y","intersection","j","push","Line","point","dot","t","line","R","determinant","Rotation","C","pointClosestTo","C1","C2","C3","A1","A2","A3","z","N1","N2","N3","newA","reflectionIn","AN1","AN2","AN3","Q","newN","rotate","to3D","v11","v12","v13","mod","v21","v22","v23","modulus","sqrt","XY","k","YZ","ZX","YX","ZY","XZ","fromPoints","points","np","length","list","n","prevN","totalN"],"mappings":"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","file":"Plane.js","sourcesContent":["\"use strict\";\n\nimport { PRECISION } from \"./PRECISION\";\nimport { Matrix } from \"./Matrix\";\nimport { Vector } from \"./Vector\";\nimport { Line } from \"./Line\";\n\nexport class Plane\n{\n    constructor (anchor, v1, v2)\n    {\n        this.setVectors(anchor, v1, v2);\n    }\n\n    eql (plane)\n    {\n        return (this.contains(plane.anchor) && this.isParallelTo(plane));\n    }\n\n    dup ()\n    {\n        return new Plane(this.anchor, this.normal);\n    }\n\n    translate (vector)\n    {\n        var V = vector.elements || vector;\n        return new Plane([\n            this.anchor.elements[0] + V[0],\n            this.anchor.elements[1] + V[1],\n            this.anchor.elements[2] + (V[2] || 0)\n        ], this.normal);\n    }\n\n    isParallelTo (obj)\n    {\n        var theta;\n        if (obj.normal)\n        {\n            // obj is a plane\n            theta = this.normal.angleFrom(obj.normal);\n            return (Math.abs(theta) <= PRECISION || Math.abs(Math.PI - theta) <= PRECISION);\n        }\n        else if (obj.direction)\n        {\n            // obj is a line\n            return this.normal.isPerpendicularTo(obj.direction);\n        }\n        return null;\n    }\n\n    isPerpendicularTo (plane)\n    {\n        var theta = this.normal.angleFrom(plane.normal);\n        return (Math.abs(Math.PI/2 - theta) <= PRECISION);\n    }\n\n    distanceFrom (obj)\n    {\n        if (this.intersects(obj) || this.contains(obj))\n        {\n            return 0;\n        }\n        if (obj.anchor)\n        {\n            // obj is a plane or line\n            var A = this.anchor.elements, B = obj.anchor.elements, N = this.normal.elements;\n            return Math.abs((A[0] - B[0]) * N[0] + (A[1] - B[1]) * N[1] + (A[2] - B[2]) * N[2]);\n        }\n        else\n        {\n            // obj is a point\n            var P = obj.elements || obj;\n            var A = this.anchor.elements, N = this.normal.elements;\n            return Math.abs((A[0] - P[0]) * N[0] + (A[1] - P[1]) * N[1] + (A[2] - (P[2] || 0)) * N[2]);\n        }\n    }\n\n    contains (obj)\n    {\n        if (obj.normal)\n        {\n            return null;\n        }\n        if (obj.direction)\n        {\n            return (this.contains(obj.anchor) && this.contains(obj.anchor.add(obj.direction)));\n        }\n        else\n        {\n            var P = obj.elements || obj;\n            var A = this.anchor.elements, N = this.normal.elements;\n            var diff = Math.abs(N[0]*(A[0] - P[0]) + N[1]*(A[1] - P[1]) + N[2]*(A[2] - (P[2] || 0)));\n            return (diff <= PRECISION);\n        }\n    }\n\n    intersects (obj)\n    {\n        if (typeof(obj.direction) === 'undefined' && typeof(obj.normal) === 'undefined')\n        {\n            return null;\n        }\n        return !this.isParallelTo(obj);\n    }\n\n    intersectionWith (obj)\n    {\n        if (!this.intersects(obj))\n        {\n            return null;\n        }\n        if (obj.direction)\n        {\n            // obj is a line\n            var A = obj.anchor.elements,\n                D = obj.direction.elements,\n                P = this.anchor.elements,\n                N = this.normal.elements;\n            var multiplier = (N[0]*(P[0]-A[0]) + N[1]*(P[1]-A[1]) + N[2]*(P[2]-A[2])) / (N[0]*D[0] + N[1]*D[1] + N[2]*D[2]);\n            return new Vector([A[0] + D[0]*multiplier, A[1] + D[1]*multiplier, A[2] + D[2]*multiplier]);\n        }\n        else if (obj.normal)\n        {\n            // obj is a plane\n            var direction = this.normal.cross(obj.normal).toUnitVector();\n            // To find an anchor point, we find one co-ordinate that has a value of\n            // zero somewhere on the intersection, and remember which one we picked\n            var N = this.normal.elements,\n                A = this.anchor.elements,\n                O = obj.normal.elements,\n                B = obj.anchor.elements;\n            var solver = Matrix.Zero(2,2), i = 0;\n            while (solver.isSingular())\n            {\n                i++;\n                solver = new Matrix([\n                    [ N[i%3], N[(i+1)%3] ],\n                    [ O[i%3], O[(i+1)%3]  ]\n                ]);\n            }\n            // Then we solve the simultaneous equations in the remaining dimensions\n            var inverse = solver.inverse().elements;\n            var x = N[0]*A[0] + N[1]*A[1] + N[2]*A[2];\n            var y = O[0]*B[0] + O[1]*B[1] + O[2]*B[2];\n            var intersection = [\n                inverse[0][0] * x + inverse[0][1] * y,\n                inverse[1][0] * x + inverse[1][1] * y\n            ];\n            var anchor = [];\n            for (var j = 1; j <= 3; j++)\n            {\n                // This formula picks the right element from intersection by cycling\n                // depending on which element we set to zero above\n                anchor.push((i === j) ? 0 : intersection[(j + (5 - i)%3)%3]);\n            }\n            return new Line(anchor, direction);\n        }\n    }\n\n    pointClosestTo (point)\n    {\n        var P = point.elements || point;\n        var A = this.anchor.elements, N = this.normal.elements;\n        var dot = (A[0] - P[0]) * N[0] + (A[1] - P[1]) * N[1] + (A[2] - (P[2] || 0)) * N[2];\n        return new Vector([P[0] + N[0] * dot, P[1] + N[1] * dot, (P[2] || 0) + N[2] * dot]);\n    }\n\n    rotate (t, line)\n    {\n        var R = t.determinant ? t.elements : Matrix.Rotation(t, line.direction).elements;\n        var C = line.pointClosestTo(this.anchor).elements;\n        var A = this.anchor.elements, N = this.normal.elements;\n        var C1 = C[0], C2 = C[1], C3 = C[2], A1 = A[0], A2 = A[1], A3 = A[2];\n        var x = A1 - C1, y = A2 - C2, z = A3 - C3;\n        return new Plane(\n            [\n                C1 + R[0][0] * x + R[0][1] * y + R[0][2] * z,\n                C2 + R[1][0] * x + R[1][1] * y + R[1][2] * z,\n                C3 + R[2][0] * x + R[2][1] * y + R[2][2] * z\n            ],\n            [\n                R[0][0] * N[0] + R[0][1] * N[1] + R[0][2] * N[2],\n                R[1][0] * N[0] + R[1][1] * N[1] + R[1][2] * N[2],\n                R[2][0] * N[0] + R[2][1] * N[1] + R[2][2] * N[2]\n            ]\n        );\n    }\n\n    reflectionIn (obj)\n    {\n        if (obj.normal)\n        {\n            // obj is a plane\n            var A = this.anchor.elements, N = this.normal.elements;\n            var A1 = A[0], A2 = A[1], A3 = A[2], N1 = N[0], N2 = N[1], N3 = N[2];\n            var newA = this.anchor.reflectionIn(obj).elements;\n            // Add the plane's normal to its anchor, then mirror that in the other plane\n            var AN1 = A1 + N1, AN2 = A2 + N2, AN3 = A3 + N3;\n            var Q = obj.pointClosestTo([AN1, AN2, AN3]).elements;\n            var newN = [Q[0] + (Q[0] - AN1) - newA[0], Q[1] + (Q[1] - AN2) - newA[1], Q[2] + (Q[2] - AN3) - newA[2]];\n            return new Plane(newA, newN);\n        }\n        else if (obj.direction)\n        {\n            // obj is a line\n            return this.rotate(Math.PI, obj);\n        }\n        else\n        {\n            // obj is a point\n            var P = obj.elements || obj;\n            return new Plane(this.anchor.reflectionIn([P[0], P[1], (P[2] || 0)]), this.normal);\n        }\n    }\n\n    setVectors (anchor, v1, v2)\n    {\n        anchor = new Vector(anchor);\n        anchor = anchor.to3D(); if (anchor === null) { return null; }\n        v1 = new Vector(v1);\n        v1 = v1.to3D(); if (v1 === null) { return null; }\n        if (typeof(v2) === 'undefined')\n        {\n            v2 = null;\n        }\n        else\n        {\n            v2 = new Vector(v2);\n            v2 = v2.to3D();\n            if (v2 === null)\n            {\n                return null;\n            }\n        }\n        var A1 = anchor.elements[0], A2 = anchor.elements[1], A3 = anchor.elements[2];\n        var v11 = v1.elements[0], v12 = v1.elements[1], v13 = v1.elements[2];\n        var normal, mod;\n        if (v2 !== null)\n        {\n            var v21 = v2.elements[0], v22 = v2.elements[1], v23 = v2.elements[2];\n            normal = new Vector([\n                (v12 - A2) * (v23 - A3) - (v13 - A3) * (v22 - A2),\n                (v13 - A3) * (v21 - A1) - (v11 - A1) * (v23 - A3),\n                (v11 - A1) * (v22 - A2) - (v12 - A2) * (v21 - A1)\n            ]);\n            mod = normal.modulus();\n            if (mod === 0)\n            {\n                return null;\n            }\n            normal = new Vector([normal.elements[0] / mod, normal.elements[1] / mod, normal.elements[2] / mod]);\n        }\n        else\n        {\n            mod = Math.sqrt(v11*v11 + v12*v12 + v13*v13);\n            if (mod === 0)\n            {\n                return null;\n            }\n            normal = new Vector([v1.elements[0] / mod, v1.elements[1] / mod, v1.elements[2] / mod]);\n        }\n        this.anchor = anchor;\n        this.normal = normal;\n        return this;\n    }\n}\n\nPlane.XY = new Plane(Vector.Zero(3), Vector.k);\nPlane.YZ = new Plane(Vector.Zero(3), Vector.i);\nPlane.ZX = new Plane(Vector.Zero(3), Vector.j);\nPlane.YX = Plane.XY; Plane.ZY = Plane.YZ; Plane.XZ = Plane.ZX;\n\nPlane.fromPoints = function(points)\n{\n    var np = points.length,\n        list = [],\n        i, P, n, N, A, B, C, D, theta, prevN,\n        totalN = Vector.Zero(3);\n    for (i = 0; i < np; i++)\n    {\n        P = new Vector(points[i]).to3D();\n        if (P === null)\n        {\n            return null;\n        }\n        list.push(P);\n        n = list.length;\n        if (n > 2)\n        {\n            // Compute plane normal for the latest three points\n            A = list[n-1].elements; B = list[n-2].elements; C = list[n-3].elements;\n            N = new Vector([\n                (A[1] - B[1]) * (C[2] - B[2]) - (A[2] - B[2]) * (C[1] - B[1]),\n                (A[2] - B[2]) * (C[0] - B[0]) - (A[0] - B[0]) * (C[2] - B[2]),\n                (A[0] - B[0]) * (C[1] - B[1]) - (A[1] - B[1]) * (C[0] - B[0])\n            ]).toUnitVector();\n            if (n > 3)\n            {\n                // If the latest normal is not (anti)parallel to the previous one, we've\n                // strayed off the plane. This might be a slightly long-winded way of\n                // doing things, but we need the sum of all the normals to find which\n                // way the plane normal should point so that the points form an\n                // anticlockwise list.\n                theta = N.angleFrom(prevN);\n                if (theta !== null)\n                {\n                    if (!(Math.abs(theta) <= PRECISION || Math.abs(theta - Math.PI) <= PRECISION)) { return null; }\n                }\n            }\n            totalN = totalN.add(N);\n            prevN = N;\n        }\n    }\n    // We need to add in the normals at the start and end points, which the above\n    // misses out\n    A = list[1].elements; B = list[0].elements; C = list[n-1].elements; D = list[n-2].elements;\n    totalN = totalN.add(new Vector([\n        (A[1] - B[1]) * (C[2] - B[2]) - (A[2] - B[2]) * (C[1] - B[1]),\n        (A[2] - B[2]) * (C[0] - B[0]) - (A[0] - B[0]) * (C[2] - B[2]),\n        (A[0] - B[0]) * (C[1] - B[1]) - (A[1] - B[1]) * (C[0] - B[0])\n    ]).toUnitVector()).add(new Vector([\n        (B[1] - C[1]) * (D[2] - C[2]) - (B[2] - C[2]) * (D[1] - C[1]),\n        (B[2] - C[2]) * (D[0] - C[0]) - (B[0] - C[0]) * (D[2] - C[2]),\n        (B[0] - C[0]) * (D[1] - C[1]) - (B[1] - C[1]) * (D[0] - C[0])\n    ]).toUnitVector());\n    return new Plane(list[0], totalN);\n};\n"]}