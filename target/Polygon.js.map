{"version":3,"sources":["../src/Polygon.js"],"names":["Polygon","points","plane","setVertices","i","vertices","at","data","vertex","withData","vector","P","elements","each","node","E","setElements","translate","updateTrianglePlanes","t","line","R","Matrix","Rotation","direction","rotate","k","point","anchor","first","Plane","normal","fn","cached","triangles","length","surfaceIntegralElements","firstVertex","prev","push","fromPoints","setCache","isTriangle","A","B","next","C","Vector","modulus","trigs","trianglesForSurfaceIntegral","area","dot","v","M","V","Zero","centroid","x","pointClosestTo","nodeFor","clearCache","prevWasConvex","isConvex","nextWasConvex","convexVertices","remove","reflexVertices","append","LinkedList","Node","containsByWindingNumber","contains","hasEdgeContaining","W","theta","dt","loops","self","angleFrom","cross","isParallelTo","Math","PI","PRECISION","success","Line","Segment","create","triangulateByEarClipping","poly","dup","convexNode","mainNode","trig","randomNode","removeVertex","pointSet","toArray","Circular","newVertex","Vertex","prepend","populateVertexTypeLists","type","key","value","inspect","join"],"mappings":"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","file":"Polygon.js","sourcesContent":["\"use strict\";\n\nimport { LinkedList } from \"./LinkedList\";\nimport { PRECISION } from \"./PRECISION\";\nimport { Matrix } from \"./Matrix\";\nimport { Vector } from \"./Vector\";\nimport { Plane } from \"./Plane\";\nimport { Line } from \"./Line\";\n\nexport class Polygon\n{\n    constructor (points, plane)\n    {\n        this.setVertices(points, plane);\n    }\n\n    v (i)\n    {\n        return this.vertices.at(i - 1).data;\n    }\n\n    nodeFor (vertex)\n    {\n        return this.vertices.withData(vertex);\n    }\n\n    dup ()\n    {\n        return new Polygon(this.vertices, this.plane);\n    }\n\n    translate (vector)\n    {\n        var P = vector.elements || vector;\n        this.vertices.each(function(node)\n            {\n                var E = node.data.elements;\n                node.data.setElements([E[0] + P[0], E[1] + P[1], E[2] + (P[2] || 0)]);\n            });\n        this.plane = this.plane.translate(vector);\n        this.updateTrianglePlanes(function(plane)\n            {\n                return plane.translate(vector);\n            });\n        return this;\n    }\n\n    rotate (t, line)\n    {\n        var R = Matrix.Rotation(t, line.direction);\n        this.vertices.each(function(node)\n            {\n                node.data.setElements(node.data.rotate(R, line).elements);\n            });\n        this.plane = this.plane.rotate(R, line);\n        this.updateTrianglePlanes(function(plane)\n            {\n                return plane.rotate(R, line);\n            });\n        return this;\n    }\n\n    scale (k, point)\n    {\n        var P = point.elements || point;\n        this.vertices.each(function(node)\n            {\n                var E = node.data.elements;\n                node.data.setElements([\n                    P[0] + k * (E[0] - P[0]),\n                    P[1] + k * (E[1] - P[1]),\n                    (P[2] || 0) + k * (E[2] - (P[2] || 0))\n                ]);\n            });\n        var anchor = this.vertices.first.data;\n        this.plane.anchor.setElements(anchor);\n        this.updateTrianglePlanes(function(plane)\n            {\n                return new Plane(anchor, plane.normal);\n            });\n        return this;\n    }\n\n    // Updates the plane properties of all the cached triangles belonging to the\n    // polygon according to the given function. For example, suppose you just\n    // rotated the polygon, you should call:\n    //\n    //   poly.updateTrianglePlanes(function(plane) { return plane.rotate(t, line); });\n    //\n    // This method is called automatically by Polygon.translate,\n    // Polygon.rotate and Polygon.scale transformation methods.\n    updateTrianglePlanes (fn)\n    {\n        var i;\n        if (this.cached.triangles !== null)\n        {\n            i = this.cached.triangles.length;\n            while (i--)\n            {\n                this.cached.triangles[i].plane = fn(this.cached.triangles[i].plane);\n            }\n        }\n        if (this.cached.surfaceIntegralElements !== null)\n        {\n            i = this.cached.surfaceIntegralElements.length;\n            while (i--)\n            {\n                this.cached.surfaceIntegralElements[i].plane = fn(this.cached.surfaceIntegralElements[i].plane);\n            }\n        }\n    }\n\n    isTriangle ()\n    {\n        return this.vertices.length === 3;\n    }\n\n    // Returns a collection of triangles used for calculating area and center of\n    // mass. Some of the triangles will not lie inside the polygon - this\n    // collection is essentially a series of itervals in a surface integral, so\n    // some are 'negative'. If you want the polygon broken into constituent\n    // triangles, use toTriangles(). This method is used because it's much faster\n    // than toTriangles().\n    //\n    // The triangles generated share vertices with the original polygon, so they\n    // transform with the polygon. They are cached after first calculation and\n    // should remain in sync with changes to the parent polygon.\n    trianglesForSurfaceIntegral ()\n    {\n        if (this.cached.surfaceIntegralElements !== null)\n        {\n            return this.cached.surfaceIntegralElements;\n        }\n        var triangles = [];\n        var firstVertex = this.vertices.first.data;\n        var plane = this.plane;\n        this.vertices.each(function(node, i)\n            {\n                if (i < 2)\n                {\n                    return;\n                }\n                var points = [firstVertex, node.prev.data, node.data];\n                // If the vertices lie on a straigh line, give the polygon's own plane. If\n                // the element has no area, it doesn't matter which way its normal faces.\n                triangles.push(new Polygon(points, Plane.fromPoints(points) || plane));\n            });\n        return this.setCache('surfaceIntegralElements', triangles);\n    }\n\n    area ()\n    {\n        if (this.isTriangle())\n        {\n            // Area is half the modulus of the cross product of two sides\n            var A = this.vertices.first, B = A.next, C = B.next;\n            A = A.data.elements; B = B.data.elements; C = C.data.elements;\n            return 0.5 * new Vector([\n                (A[1] - B[1]) * (C[2] - B[2]) - (A[2] - B[2]) * (C[1] - B[1]),\n                (A[2] - B[2]) * (C[0] - B[0]) - (A[0] - B[0]) * (C[2] - B[2]),\n                (A[0] - B[0]) * (C[1] - B[1]) - (A[1] - B[1]) * (C[0] - B[0])\n            ]).modulus();\n        }\n        else\n        {\n            var trigs = this.trianglesForSurfaceIntegral(), area = 0;\n            var i = trigs.length;\n            while (i--)\n            {\n                area += trigs[i].area() * trigs[i].plane.normal.dot(this.plane.normal);\n            }\n            return area;\n        }\n    }\n\n    centroid ()\n    {\n        if (this.isTriangle())\n        {\n            var A = this.v(1).elements, B = this.v(2).elements, C = this.v(3).elements;\n            return new Vector([(A[0] + B[0] + C[0])/3, (A[1] + B[1] + C[1])/3, (A[2] + B[2] + C[2])/3]);\n        }\n        else\n        {\n            var A, M = 0, V = Vector.Zero(3), P, C, trigs = this.trianglesForSurfaceIntegral();\n            var i = trigs.length;\n            while (i--)\n            {\n                A = trigs[i].area() * trigs[i].plane.normal.dot(this.plane.normal);\n                M += A;\n                P = V.elements;\n                C = trigs[i].centroid().elements;\n                V.setElements([P[0] + C[0] * A, P[1] + C[1] * A, P[2] + C[2] * A]);\n            }\n            return V.x(1/M);\n        }\n    }\n\n    projectionOn (plane)\n    {\n        var points = [];\n        this.vertices.each(function(node)\n            {\n                points.push(plane.pointClosestTo(node.data));\n            });\n        return new Polygon(points);\n    }\n\n    removeVertex (vertex)\n    {\n        if (this.isTriangle())\n        {\n            return;\n        }\n        var node = this.nodeFor(vertex);\n        if (node === null)\n        {\n            return null;\n        }\n        this.clearCache();\n        // Previous and next entries in the main vertex list\n        var prev = node.prev, next = node.next;\n        var prevWasConvex = prev.data.isConvex(this);\n        var nextWasConvex = next.data.isConvex(this);\n        if (node.data.isConvex(this))\n        {\n            this.convexVertices.remove(this.convexVertices.withData(node.data));\n        }\n        else\n        {\n            this.reflexVertices.remove(this.reflexVertices.withData(node.data));\n        }\n        this.vertices.remove(node);\n        // Deal with previous vertex's change of class\n        if (prevWasConvex !== prev.data.isConvex(this))\n        {\n            if (prevWasConvex)\n            {\n                this.convexVertices.remove(this.convexVertices.withData(prev.data));\n                this.reflexVertices.append(new LinkedList.Node(prev.data));\n            }\n            else\n            {\n                this.reflexVertices.remove(this.reflexVertices.withData(prev.data));\n                this.convexVertices.append(new LinkedList.Node(prev.data));\n            }\n        }\n        // Deal with next vertex's change of class\n        if (nextWasConvex !== next.data.isConvex(this))\n        {\n            if (nextWasConvex)\n            {\n                this.convexVertices.remove(this.convexVertices.withData(next.data));\n                this.reflexVertices.append(new LinkedList.Node(next.data));\n            }\n            else\n            {\n                this.reflexVertices.remove(this.reflexVertices.withData(next.data));\n                this.convexVertices.append(new LinkedList.Node(next.data));\n            }\n        }\n        return this;\n    }\n\n    contains (point)\n    {\n        return this.containsByWindingNumber(point);\n    }\n\n    containsByWindingNumber (point)\n    {\n        var P = point.elements || point;\n        if (!this.plane.contains(P))\n        {\n            return false;\n        }\n        if (this.hasEdgeContaining(P))\n        {\n            return false;\n        }\n        var V, W, A, B, theta = 0, dt, loops = 0, self = this;\n        this.vertices.each(function(node)\n            {\n                V = node.data.elements;\n                W = node.next.data.elements;\n                A = new Vector([V[0] - P[0], V[1] - P[1], V[2] - (P[2] || 0)]);\n                B = new Vector([W[0] - P[0], W[1] - P[1], W[2] - (P[2] || 0)]);\n                dt = A.angleFrom(B);\n                if (dt === null || dt === 0) { return; }\n                theta += (A.cross(B).isParallelTo(self.plane.normal) ? 1 : -1) * dt;\n                if (theta >= 2 * Math.PI - PRECISION) { loops++; theta -= 2 * Math.PI; }\n                if (theta <= -2 * Math.PI + PRECISION) { loops--; theta += 2 * Math.PI; }\n            });\n        return loops !== 0;\n    }\n\n    hasEdgeContaining (point)\n    {\n        var P = (point.elements || point);\n        var success = false;\n        this.vertices.each(function(node)\n            {\n                if (Line.Segment.create(node.data, node.next.data).contains(P))\n                {\n                    success = true;\n                }\n            });\n        return success;\n    }\n\n    toTriangles ()\n    {\n        if (this.cached.triangles !== null)\n        {\n            return this.cached.triangles;\n        }\n        return this.setCache('triangles', this.triangulateByEarClipping());\n    }\n\n    // Implementation of ear clipping algorithm\n    // Found in 'Triangulation by ear clipping', by David Eberly\n    // at http://www.geometrictools.com\n    // This will not deal with overlapping sections - contruct your polygons\n    // sensibly\n    triangulateByEarClipping ()\n    {\n        var poly = this.dup(), triangles = [], success, convexNode, mainNode, trig;\n        while (!poly.isTriangle())\n        {\n            success = false;\n            while (!success)\n            {\n                success = true;\n                // Ear tips must be convex vertices - let's pick one at random\n                convexNode = poly.convexVertices.randomNode();\n                mainNode = poly.vertices.withData(convexNode.data);\n                // For convex vertices, this order will always be anticlockwise\n                trig = new Polygon([mainNode.data, mainNode.next.data, mainNode.prev.data], this.plane);\n                // Now test whether any reflex vertices lie within the ear\n                    poly.reflexVertices.each(function(node)\n                    {\n                        // Don't test points belonging to this triangle. node won't be equal\n                        // to convexNode as node is reflex and vertex is convex.\n                        if (node.data !== mainNode.prev.data && node.data !== mainNode.next.data)\n                        {\n                            if (trig.contains(node.data) || trig.hasEdgeContaining(node.data))\n                            {\n                                success = false;\n                            }\n                        }\n                    });\n            }\n            triangles.push(trig);\n            poly.removeVertex(mainNode.data);\n        }\n        // Need to do this to renumber the remaining vertices\n        triangles.push(new Polygon(poly.vertices, this.plane));\n        return triangles;\n    }\n\n    setVertices (points, plane)\n    {\n        var pointSet = points.toArray ? points.toArray() : points;\n        this.plane = (plane && plane.normal) ? plane.dup() : Plane.fromPoints(pointSet);\n        if (this.plane === null)\n        {\n            return null;\n        }\n        this.vertices = new LinkedList.Circular();\n        // Construct linked list of vertices. If each point is already a polygon\n        // vertex, we reference it rather than creating a new vertex.\n        var i = pointSet.length, newVertex;\n        while (i--)\n        {\n            newVertex = pointSet[i].isConvex ? pointSet[i] : new Polygon.Vertex(pointSet[i]);\n            this.vertices.prepend(new LinkedList.Node(newVertex));\n        }\n        this.clearCache();\n        this.populateVertexTypeLists();\n        return this;\n    }\n\n    populateVertexTypeLists ()\n    {\n        this.convexVertices = new LinkedList.Circular();\n        this.reflexVertices = new LinkedList.Circular();\n        var self = this;\n        this.vertices.each(function(node)\n            {\n                // Split vertices into convex / reflex groups. The\n                // LinkedList.Node class wraps each vertex so it can belong to\n                // many linked lists.\n                self[node.data.type(self) + 'Vertices'].append(new LinkedList.Node(node.data));\n            });\n    }\n\n    copyVertices ()\n    {\n        this.clearCache();\n        this.vertices.each(function(node)\n            {\n                node.data = new Polygon.Vertex(node.data);\n            });\n        this.populateVertexTypeLists();\n    }\n\n    clearCache ()\n    {\n        this.cached = {\n            triangles: null,\n            surfaceIntegralElements: null\n        };\n    }\n\n    setCache (key, value)\n    {\n        this.cached[key] = value;\n        return value;\n    }\n\n    inspect ()\n    {\n        var points = [];\n        this.vertices.each(function(node)\n            {\n                points.push(node.data.inspect());\n            });\n        return points.join(' -> ');\n    }\n}\n"]}