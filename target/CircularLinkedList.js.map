{"version":3,"sources":["../src/CircularLinkedList.js"],"names":["CircularLinkedList","node","first","prev","next","last","length","append","newNode","data","nodeFromStart","nodeFromEnd","n","Math","ceil","LinkedList","fromArray","list","useNodes","linked","prepend","Node"],"mappings":"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","file":"CircularLinkedList.js","sourcesContent":["\"use strict\";\n\nimport { LinkedList } from \"./LinkedList\";\n\nexport class CircularLinkedList extends LinkedList\n{\n    append (node)\n    {\n        if (this.first === null)\n        {\n            node.prev = node;\n            node.next = node;\n            this.first = node;\n            this.last = node;\n        }\n        else\n        {\n            node.prev = this.last;\n            node.next = this.first;\n            this.first.prev = node;\n            this.last.next = node;\n            this.last = node;\n        }\n        this.length++;\n    }\n\n    prepend (node)\n    {\n        if (this.first === null)\n        {\n            this.append(node);\n            return;\n        }\n        else\n        {\n            node.prev = this.last;\n            node.next = this.first;\n            this.first.prev = node;\n            this.last.next = node;\n            this.first = node;\n        }\n        this.length++;\n    }\n\n    insertAfter (node, newNode)\n    {\n        newNode.prev = node;\n        newNode.next = node.next;\n        node.next.prev = newNode;\n        node.next = newNode;\n        if (newNode.prev === this.last)\n        {\n            this.last = newNode;\n        }\n        this.length++;\n    }\n\n    insertBefore (node, newNode)\n    {\n        newNode.prev = node.prev;\n        newNode.next = node;\n        node.prev.next = newNode;\n        node.prev = newNode;\n        if (newNode.next === this.first)\n        {\n            this.first = newNode;\n        }\n        this.length++;\n    }\n\n    remove (node)\n    {\n        if (this.length > 1)\n        {\n            node.prev.next = node.next;\n            node.next.prev = node.prev;\n            if (node === this.first)\n            {\n                this.first = node.next;\n            }\n            if (node === this.last)\n            {\n                this.last = node.prev;\n            }\n        }\n        else\n        {\n            this.first = null;\n            this.last = null;\n        }\n        node.prev = null;\n        node.next = null;\n        this.length--;\n    }\n\n    withData (data)\n    {\n        var nodeFromStart = this.first, nodeFromEnd = this.last, n = Math.ceil(this.length / 2);\n        while (n--)\n        {\n            if (nodeFromStart.data === data)\n            {\n                return nodeFromStart;\n            }\n            if (nodeFromEnd.data === data)\n            {\n                return nodeFromEnd;\n            }\n            nodeFromStart = nodeFromStart.next;\n            nodeFromEnd = nodeFromEnd.prev;\n        }\n        return null;\n    }\n};\n\nCircularLinkedList.fromArray = function(list, useNodes) {\n    var linked = new CircularLinkedList();\n    var n = list.length;\n    while (n--)\n    {\n        linked.prepend(useNodes ? new LinkedList.Node(list[n]) : list[n]);\n    }\n    return linked;\n};"]}